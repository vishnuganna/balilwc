@isTest
public with sharing class CriticalVulnerabilityControllerTest {
    @testSetup
    static void setup() {
        User user = UserTest.createUserWithPerms();
        System.runAs(user) {
            Account acc = TestDataUtil.createAccount(true);
            Gold_Sheet__c goldsheet = TestDataUtil.createGoldSheet(acc, true);
        }
    }
    static testMethod void testSaveData() {
        User user = UserTest.createUserWithPerms();
        System.runAs(user) {
            Gold_Sheet__c goldsheet = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            String id = goldsheet.Id;

            Map<String, Map<String, Boolean>> rfsData = new Map<String, Map<String, Boolean>>();
            Map<String, Boolean> rfs = new Map<String, Boolean>();
            rfs.put('redFlagSelected', false);
            rfs.put('strengthSelected', false);
            rfs.put('noneSelected', true);
            rfs.put('fieldApiName', false);
            rfsData.put('EvaluationOfObjective', rfs);

            map<String, Object> newmap = new Map<String, Object>();
            newmap.put('title', 'test data 1');
            newmap.put('description', 'test descrpiton');
            newmap.put('goldSheetId', id);
            newmap.put('hasEditAccess', true);

            String jsonstring = JSON.Serialize(newmap);

            CriticalVulnerabilityWrapper wrapper = CriticalVulnerabilityController.saveVulnerabilityData(
                jsonstring,
                rfsData
            );

            Gold_Sheet__c goldsheetData = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            system.assertEquals(goldsheetData.Critical_Vulnerability_Title__c, 'test data 1');

            Map<String, Map<String, Boolean>> rfsData2 = new Map<String, Map<String, Boolean>>();
            Map<String, Boolean> rfs2 = new Map<String, Boolean>();
            rfs2.put('redFlagSelected', false);
            rfs2.put('strengthSelected', true);
            rfs2.put('noneSelected', false);
            rfs2.put('fieldApiName', false);
            rfsData2.put('EvaluationOfObjective', rfs2);
            CriticalVulnerabilityWrapper wrapper2 = CriticalVulnerabilityController.saveVulnerabilityData(
                jsonstring,
                rfsData2
            );
            system.assertEquals(goldsheetData.Critical_Vulnerability_Desc__c, 'test descrpiton');
        }
    }
    static testMethod void testGetData() {
        User user = UserTest.createUserWithPerms();
        System.runAs(user) {
            Gold_Sheet__c goldsheet = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            String id = goldsheet.Id;

            map<String, Object> newmap = new Map<String, Object>();
            newmap.put('title', 'test data 1');
            newmap.put('description', 'test descrpiton');
            newmap.put('goldSheetId', id);
            newmap.put('hasEditAccess', true);

            String jsonstring = JSON.Serialize(newmap);
            Map<String, Map<String, Boolean>> rfsData = new Map<String, Map<String, Boolean>>();
            CriticalVulnerabilityWrapper wrapper = CriticalVulnerabilityController.saveVulnerabilityData(
                jsonstring,
                rfsData
            );
            CriticalVulnerabilityWrapper wrapper2 = CriticalVulnerabilityController.getVulnerabilityData(id);
            Gold_Sheet__c goldsheetData = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            system.assertEquals(wrapper2.title, 'test data 1');
        }
    }
    static testMethod void testdeleteData() {
        User user = UserTest.createUserWithPerms();
        System.runAs(user) {
            Gold_Sheet__c goldsheet = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            String id = goldsheet.Id;
            map<String, Object> newmap = new Map<String, Object>();
            newmap.put('title', 'test data 1');
            newmap.put('description', 'test descrpiton');
            newmap.put('goldSheetId', id);
            newmap.put('hasEditAccess', true);

            String jsonstring = JSON.Serialize(newmap);
            Map<String, Map<String, Boolean>> rfsData = new Map<String, Map<String, Boolean>>();
            CriticalVulnerabilityWrapper wrapper = CriticalVulnerabilityController.saveVulnerabilityData(
                jsonstring,
                rfsData
            );

            CriticalVulnerabilityController.deleteCriticalVulnerability(id);
            Gold_Sheet__c goldsheetdata = [
                SELECT Id, Name, Critical_Vulnerability_Desc__c, Critical_Vulnerability_Title__c
                FROM Gold_Sheet__c
                LIMIT 1
            ];
            system.assertEquals(goldsheetdata.Critical_Vulnerability_Title__c, null);
        }
    }
}